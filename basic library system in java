import java.io.*;
import java.util.*;

class Book {
    private String title;
    private String author;
    private String isbn;
    private boolean isAvailable;

    public Book(String title, String author, String isbn) {
        this.title = title;
        this.author = author;
        this.isbn = isbn;
        this.isAvailable = true;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getIsbn() {
        return isbn;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void borrowBook() {
        if (isAvailable) {
            isAvailable = false;
        } else {
            System.out.println("Book is already borrowed.");
        }
    }

    public void returnBook() {
        if (!isAvailable) {
            isAvailable = true;
        } else {
            System.out.println("Book was not borrowed.");
        }
    }

    @Override
    public String toString() {
        return "Title: " + title + ", Author: " + author + ", ISBN: " + isbn + ", Available: " + isAvailable;
    }
}

class Library {
    private Map<String, Book> books;
    private String libraryName;

    public Library(String libraryName) {
        this.libraryName = libraryName;
        this.books = new HashMap<>();
    }

    public void addBook(Book book) {
        books.put(book.getIsbn(), book);
    }

    public void removeBook(String isbn) {
        books.remove(isbn);
    }

    public Book findBookByIsbn(String isbn) {
        return books.get(isbn);
    }

    public List<Book> listAllBooks() {
        return new ArrayList<>(books.values());
    }

    public void borrowBook(String isbn) {
        Book book = findBookByIsbn(isbn);
        if (book != null) {
            book.borrowBook();
        } else {
            System.out.println("Book not found.");
        }
    }

    public void returnBook(String isbn) {
        Book book = findBookByIsbn(isbn);
        if (book != null) {
            book.returnBook();
        } else {
            System.out.println("Book not found.");
        }
    }

    public void printLibraryDetails() {
        System.out.println("Library: " + libraryName);
        for (Book book : listAllBooks()) {
            System.out.println(book);
        }
    }
}

public class LibrarySystem {
    private static final String FILE_PATH = "library_data.txt";
    private static Library library;

    public static void main(String[] args) {
        library = new Library("My Local Library");

        // Load library data from file
        loadLibraryData();

        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nLibrary System");
            System.out.println("1. Add a Book");
            System.out.println("2. Remove a Book");
            System.out.println("3. Borrow a Book");
            System.out.println("4. Return a Book");
            System.out.println("5. List All Books");
            System.out.println("6. Save & Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    addBook(scanner);
                    break;
                case 2:
                    removeBook(scanner);
                    break;
                case 3:
                    borrowBook(scanner);
                    break;
                case 4:
                    returnBook(scanner);
                    break;
                case 5:
                    listAllBooks();
                    break;
                case 6:
                    saveLibraryData();
                    System.out.println("Data saved. Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice.");
            }
        } while (choice != 6);

        scanner.close();
    }

    private static void addBook(Scanner scanner) {
        System.out.print("Enter book title: ");
        String title = scanner.nextLine();
        System.out.print("Enter book author: ");
        String author = scanner.nextLine();
        System.out.print("Enter book ISBN: ");
        String isbn = scanner.nextLine();
        Book newBook = new Book(title, author, isbn);
        library.addBook(newBook);
        System.out.println("Book added.");
    }

    private static void removeBook(Scanner scanner) {
        System.out.print("Enter ISBN of the book to remove: ");
        String isbn = scanner.nextLine();
        library.removeBook(isbn);
        System.out.println("Book removed.");
    }

    private static void borrowBook(Scanner scanner) {
        System.out.print("Enter ISBN of the book to borrow: ");
        String isbn = scanner.nextLine();
        library.borrowBook(isbn);
    }

    private static void returnBook(Scanner scanner) {
        System.out.print("Enter ISBN of the book to return: ");
        String isbn = scanner.nextLine();
        library.returnBook(isbn);
    }

    private static void listAllBooks() {
        library.printLibraryDetails();
    }

    private static void saveLibraryData() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH))) {
            for (Book book : library.listAllBooks()) {
                writer.write(book.getTitle() + "," + book.getAuthor() + "," + book.getIsbn() + "," + book.isAvailable());
                writer.newLine();
            }
        } catch (IOException e) {
            System.out.println("Error saving library data: " + e.getMessage());
        }
    }

    private static void loadLibraryData() {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                String title = data[0];
                String author = data[1];
                String isbn = data[2];
                boolean isAvailable = Boolean.parseBoolean(data[3]);
                Book book = new Book(title, author, isbn);
                if (!isAvailable) {
                    book.borrowBook(); // Mark as borrowed
                }
                library.addBook(book);
            }
        } catch (IOException e) {
            System.out.println("Error loading library data: " + e.getMessage());
        }
    }
}
